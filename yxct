#!/bin/bash

CMD=$(basename $0)

BIN_PATH='/bin'
SBIN_PATH='/sbin'
USR_BIN_PATH='/usr/bin'
USR_SBIN_PATH='/usr/sbin'
USR_LOCAL_BIN_PATH='/usr/local/bin'
USR_LOCAL_SBIN_PATH='/usr/local/sbin'
DEFAULT_BIN_PATH="${USR_LOCAL_BIN_PATH}"

CP=/usr/bin/cp
RM=/usr/bin/rm

BASH=/bin/bash
ENV=/usr/bin/env



#Display comand only, not run
TEST_ONLY=false


INFO_SILENT=0
INFO_FATAL=1
INFO_ERROR=4
INFO_VERBOSE=9
INFO_LEVEL=${INFO_ERROR} # default error

###########################################################
# Ignore file list in script folder
###########################################################

IGNORE_LIST=(
	# git
	"\.gitignore"
	"\.git"
	"\.gitkeep"
	
	################
	#vim
	# # vim->swap
	"[._]*\.s[a-v][a-z]"
	"[._]*.sw[a-p]"
	"[._]s[a-rt-v][a-z]"
	"[._]ss[a-gi-z]"
	"[._]sw[a-p]"
	# # vim->session
	"Session"
	"Sessionx"
	# # vim->Temporary
	"\.netrwhist"
	"\*~"
	# # vim->Auto-generated tag files
	"tags"
	# # vim->Persistent undo
	"[._]*.un~"
	
	################
	#vscode
	"\.vscode"
	# # vscode->Local History for Visual Studio Code
	"\.history"
	# # vscode->Built Visual Studio Code Extensions
	".*\.vsix"
	# # vscode->VisualStudioCode Patch
	"\.history"
	"\.ionide"
	
	# custom
	"README(\.md)?"
	"test(\.sh)?"
	"sample(\.sh)?"
)


###########################################################
# logger
###########################################################

function yx_eval()
{
  # get script file path from command
  local script_path=$(echo $@ | awk '{print $1}')
  
  if [ -n "${script_path}" ]; then
    
    # get exe titile from command
    local title=$(head -n 1 "${script_path}")
    if echo ${title} | grep -Eq "^#!.*"; then
      # if title exist, call commmand directly
      echo_cmd "eval $@"
    else
      # try get file extension name
      local file_ext=${script_path##*.}

      # call command by extension name
      if [ -n "${file_ext}" ]; then
        if strcontains "${file_ext}" "sh" --ignorecase; then
          echo_cmd "eval ${BASH} $@"
        elif strcontains "${file_ext}" "py" --ignorecase; then
          echo_cmd "eval ${ENV} python3 $@"
        else
          echo_cmd "eval $@"
        fi
      fi

    fi # end of (echo ${title} | grep -Eq "^#!.*"; then)
  fi # end of (if [ -n "${script_path}" ]; then)
}


###########################################################
# YXLib
###########################################################

function echo_verbose()
{
  if (( "${INFO_LEVEL}" < "${INFO_VERBOSE}" )); then
    return
  fi

  (>&1 echo "$1")
}

function echo_fatal()
{
  if (( "${INFO_LEVEL}" < "${INFO_ERROR}" )); then
    return
  fi

  local red=$(tput setaf 1);
  local reset=$(tput sgr0);
  
  (>&2 echo "${red}Fatal:${str}${reset}");
  exit 1;
}


function echo_cmd()
{
  if (( "${INFO_LEVEL}" < "${INFO_ERROR}" )); then
    return
  fi


  if ${TEST_ONLY}; then
    echo_verbose "Test-only:$*"
    return
  else
    echo_verbose "$*"
  fi

  $@
}

function echo_err()
{
  local magenta=$(tput setaf 5);
  local reset=$(tput sgr0);

  (>&2 echo "${magenta}${str}${reset}")
}

function yx_str_checkfmt()
{
	local reg=$1
	local str=$2
	
	if [[ -z ${str} ]]; then
		str=''
	fi
	
	if [[ -z ${reg} ]]; then
		reg='^\s*[^\s]+\s*$'
	fi
	
	if ! [[ ${str} =~ ${reg} ]] ; then
		return 1
	fi
	
	return 0
}

function strcontains()
{
	local str="$1"
	local arr_str="$2"
	local ignorecase=false
	shift 
	shift 
	
	while [ $# -gt 0 ]; do
		case $1 in
			
			--ignorecase )
				ignorecase=true
			;;
			
			*)
				echo "Invalid optional ${1}"
			;;
		esac
		shift
	done

	
	if ${ignorecase}; then
		for e in $(echo "${arr_str}"); do
			[[ "${e^^}" == "${str^^}" ]] && return 0
		done
	else
		for e in $(echo "${arr_str}"); do
      echo "compare between ${e} and ${str}"
			[[ "${e}" == "${str}" ]] && return 0
		done
	fi
	
	return 1
}

###########################################################
# Utility
###########################################################

function set_info_level()
{
  local info_level=$1
  if [ -n "${info_level}" ]; then

    if yx_str_checkfmt '^([0-9])+$' "${info_level}"; then
      INFO_LEVEL=${info_level}
    else
      if strcontains "${info_level}" 'silent' --ignorecase; then
        INFO_LEVEL=${INFO_SILENT}
      elif strcontains "${info_level}" 'fatal' --ignorecase; then
        INFO_LEVEL=${INFO_FATAL}
      elif strcontains "${info_level}" 'error' --ignorecase; then
        INFO_LEVEL=${INFO_ERROR}
      elif strcontains "${info_level}" 'verbose' --ignorecase; then
        INFO_LEVEL=${INFO_VERBOSE}
      else
        echo_fatal "Unknown info level:${info_level}"
      fi
    fi # end of 'if yx_str_checkfmt '^([0-9])+$' '

  fi # end of 'if [ -n ${info_level} ]'
}


function is_in_reg_list()
{
	local name=$1
	shift
	local reg_list=($@)
	
	if [ "${reg_list}" ]; then
		for reg in "${reg_list[@]}"; do
			reg=$(echo "${reg}" | grep -o "[^ ]\+\( \+[^ ]\+\)*")
			if echo "${name}" | grep -Eqi "${reg}"; then
				return 0
			fi
		done
	fi
	
	return 1
}


# 如果目录下只有一个文件，则返回
# 1. 会忽略 IGNORE_LIST 列表里正则对应的文件
# 2. 会忽略 --ignore 参数中正则列表对应的文件
# usage: file_name_if_single <目录>
# usage: file_name_if_single <目录> --ignore '正则1' '正则2' ....
function file_name_if_single()
{
	local script_path=$1
  local -a ignore_reg_list
  if [[ $2 == '--ignore' ]]; then
    shift # ignore $1
    shift # ignore --ignore
    ignore_reg_list=($@)
  fi

	
	local -a valid_files
	# local SAVEIFS=$IFS
	for file in "${script_path%/}"/*; do
		if [[ ${file} == ${script_path}/\* ]]; then
			continue
		fi

		local filename=$(basename  "${file}")		

    # 文件名在忽略列表里
    if is_in_reg_list "${filename}" ${ignore_reg_list[@]}; then
      continue
		fi

		if ! is_in_reg_list "${filename}" ${IGNORE_LIST[@]}; then
			valid_files=(${valid_files[@]} "${filename}")
		fi
		
	done
	# IFS=${SAVEIFS}
	
	if [[ "${#valid_files[@]}" == 1 ]]; then
		echo "${valid_files[@]}"
		return 0
	else
		return 1
	fi
}

function search_file_by_reg_list()
{
  local path=$1
  shift
  local reg_list=($@)

  # local SAVEIFS=$IFS


  # search regular files
	for file in "${script_path%/}"/*; do
		if [[ ${file} == ${script_path}/\* ]]; then
			continue
		fi

    local filename=$(basename "${file}")		
    if is_in_reg_list "${filename}" ${reg_list[@]}; then
      echo "${filename}"
      return 0
		fi
  done

  # search regular invisiable files 
  for file in "${script_path%/}"/.*; do
		if [[ ${file} == ${script_path%/}/\* ]]; then
			continue
		fi

    local filename=$(basename "${file}")		
    if [[ ${filename} == '.' ]] || [[ ${filename} == '..' ]]; then
      continue
    fi

    if is_in_reg_list "${filename}" ${reg_list[@]}; then
      echo "${filename}"
      return 0
		fi
  done


  # IFS=${SAVEIFS}

  return 1
}



# function is_same_file()
# {
#   local file1=$1
#   local file2=$2

#   local file1_hash=
#   if [ -r "${file1}" ]; then
#     file1_hash=$(shasum -a 256 "${file1}")
#   fi

#   local file2_hash=
#   if [ -r ${file2} ]; then
#     file2_hash=$(shasum -a 256 "${file2}")
#   fi

#   if [[ -f "${file1}" ]] && [[ -f "${file2}" ]]; then
#     if [ "${file1}" -eq "${file2}" ]; then
#       return 0
#     fi
#   fi

#   return 1
# }


function check_file_hash()
{
  local file=$1
  local hash=$2

  if ! [ -r "${file}" ]; then
    echo_fatal "Can not read the file:${file}"
  fi

  if [ -z "${hash}" ]; then
    echo_fatal "hash is empty."
  fi

  local file_hash=$(shasum -a 256 "${file}" | awk '{print $1}')
  if [ "${file_hash}" == "${hash}" ]; then
    return 0
  else
    return 1
  fi
}

function strcontains()
{
	local str="$1"
	local arr_str="$2"
	local ignorecase=false
	shift 
	shift 
	
	while [ $# -gt 0 ]; do
		case $1 in
			
			--ignorecase )
				ignorecase=true
			;;
			
			*)
				echo "Invalid optional ${1}"
			;;
		esac
		shift
	done

	
	if ${ignorecase}; then
		for e in $(echo "${arr_str}"); do
			[[ "${e^^}" == "${str^^}" ]] && return 0
		done
	else
		for e in $(echo "${arr_str}"); do
      echo "compare between ${e} and ${str}"
			[[ "${e}" == "${str}" ]] && return 0
		done
	fi
	
	return 1
}

# 执行卸载脚本
function run_setup_script()
{
  local script_path=
  local additional=

  local option=$1
  if strcontains "${option}" 'install' --ignorecase; then
    option="install"
    shift
  elif strcontains "${option}" 'uninstall' --ignorecase; then
    option="uninstall"
    shift
  else
    echo_fatal "option is empty."
  fi

  while [ $# -gt 0 ]; do
    case $1 in
      --path )
        shift
        script_path=$1
      ;;

      *)
        additional="${additional} $1"
    esac
    shift
  done


  if ! [ -f "${script_path}" ]; then
    echo_fatal "setup script not exist :${script_path}"
  fi

  pushd $(dirname "${script_path}") > /dev/null
  yx_eval "${script_path} ${option} ${additional}"
  result="$?"
  popd > /dev/null

  if [[ "${result}" != '0' ]]; then
    echo_fatal "Failed to run setup script: ${script_path}"
  fi

  return ${result}
}

# 根据命令名直接卸载可执行文件
function remove_command()
{
  local all=false
  local command=
  local hash=

  while [ $# -gt 0 ]; do
	  case $1 in
      --command )
        shift
        command=$1
      ;; 

      --hash )
        shift
        hash=$1
      ;; 

      --all )
        all=true
      ;; 
    esac
    shift
  done

  if [ -z "${command}" ]; then
    echo_fatal "Command is empty !"
  fi

  while true; do
    local finded_exec_path=$(which "${command}")
    if [ -z "${finded_exec_path}" ]; then
      break
    fi

    if ! [ -f ${finded_exec_path} ]; then
     echo_fatal "Can not find a command named:${filename}"
    fi

    if [ -n "${hash}" ]; then
      if ! check_file_hash "${finded_exec_path}" "${hash}"; then
        break
      fi
    fi

    # 强制删除命令
    echo_cmd "${RM} -f ${finded_exec_path}"
    if [[ $? != '0' ]]; then
      echo_fatal "Fail to uninstall '${command}'"
    fi

    if ! ${all}; then
      break
    fi

  done
}

# 根据一个可执行文件，查找安装的同名文件,并卸载
function remove_same_file()
{
    local file_path=
    local bin_path=
    local command=
    local all=false

    while [ $# -gt 0 ]; do
		  case $1 in
        --path )
          shift
          file_path=$1
        ;;

        --bin-path )
          shift
          bin_path=$1
        ;;

        --command )
          shift
          command=$1
        ;; 

        --all )
          all=true
        ;; 
      esac
      shift
    done

    if ! [ -f "${file_path}" ]; then
      echo_fatal "File not exist :${file_path}"
    fi
    local file_hash=$(shasum -a 256 "${file_path}" | awk '{print $1}' )
    if [ -z "${file_hash}" ]; then
      echo_fatal "Failed to calculate the hash value of the file:${file_path}"
    fi

    local filename=$(basename "${file_path}")
    # 如果提供了命令名，脚本名字和命令名必须相同
    if [ -n "${command}" ] && [ "${filename}" != "${command}" ]; then
      echo_fatal "Filename name and command not matched."
    fi

    if [ -n "${bin_path}" ]; then

      local finded_exec_path=
      if [ -n "${command}" ]; then
        finded_exec_path="${bin_path}/${command}"
      else
        finded_exec_path="${bin_path}/${filename}"
      fi

      if ! [ -f ${finded_exec_path} ]; then
        echo_fatal "Can not find a command at:${finded_exec_path}"
      fi

      # 要删除的文件必须和传入的文件相同
      if ! check_file_hash "${finded_exec_path}" "${file_hash}"; then
        echo_fatal "Script and execute file not matched:(${execute_file_path})"
      fi

      # 强制删除命令
      echo_cmd "${RM} -f ${execute_file_path}"
      if [[ $? != 0 ]]; then
        echo_fatal "Fail to uninstall '${command}' in path:${bin_path}"
      fi
   else
     local params=''
     if "${all}"; then
       arams="${params} --all"
     fi

     remove_command --command "${filename}" --hash "${file_hash}" ${params}
   fi
}


function install_file()
{
  local file_path=
  local bin_path=
  local command=
  local force=false

  while [ $# -gt 0 ]; do
    case $1 in
      --file )
        shift
        file_path=$1
      ;;

      --bin-path )
        shift
        bin_path=$1
      ;;

      --command )
        shift
        command=$1
      ;;

      --force )
        force=true
      ;;
    esac
    shift
  done

  if [ -z "${file_path}" ]; then
    echo_fatal "file path is empty."
  fi

  if ! [ -r "${file_path}" ]; then
    echo_fatal "Can not read file:${file_path}"
  fi


  if [ -z "${bin_path}" ]; then
    bin_path="${DEFAULT_BIN_PATH}"
  fi

  if [ -z "${command}" ]; then
    command=$(basename "${file_path}")
  fi

  local dest_path="${bin_path}/${command}"

  # 在没有指定--force时，如果目标文件已存在，且和要考呗的文件不同，则fatal
  if [ -f "${dest_path}" ] && ! ${force}; then
    local file_hash=$(shasum -a 256 "${file_path}" | awk '{print $1}')
    if ! check_file_hash "${dest_path}" "${file_hash}"; then
      echo_fatal "file already exist on dest path:${dest_path}. Use --force to overwrite the exist file"
    fi
  fi


  # 之前已经验证过 force了，这里仍然判断force参数， 避免多脚本同时执行
  local force_params=''
  if ${force}; then
    force_params='--force'
  fi

  echo_cmd "${CP} ${force_params} ${file_path} ${bin_path}/${command}"
}


# 根据安装脚本路径，卸载可执行文件
function uninstall_by_script_path()
{
  local script_path=
  local additional=
  local bin_path=
  local -a ignore_reg_list=
  local all=false
  local no_installer=false

  local is_in_ignore=false
  while [ $# -gt 0 ]; do

    if [[ $1 =~ ^--.*$ ]]; then
      is_in_ignore=false
    fi

    case $1 in
      --path )
        shift
        script_path=$1
      ;;

      --bin-path )
        shift
        bin_path=$1
      ;;

      --ignore )
        is_in_ignore=true
        force=true
      ;;

      --all )
        all=true
      ;;

      --no-installer )
        no_installer=true
      ;;

      *)
        if ${is_in_ignore}; then
          ignore_reg_list=("${ignore_reg_list[@]}" "${1}")
        else
          additional="${additional} $1"
        fi
    esac
    shift
  done

  if [ -z "${script_path}" ]; then
    echo_fatal "Script path is empty."
  fi

  local all_params=''
  if "${all}"; then
    all_params='--all'
  fi

  local params=''
  
  # --bin-path
  if [ -z "${bin_path}" ]; then
    local command_path=$(which "${command}")
    if [ -n "${command_path}" ]; then
      bin_path=$(dirname "${command_path}")
      params="--bin-path ${bin_path}"
    fi
  fi

  if [ -f "${script_path}" ]; then
  # 如果脚本路径是一个文件
    if basename "${script_path}" | grep -Eq "\.${CMD}.setup(\.sh|\.py|\.rb)?"; then
    # 如果文件是一个安装脚本, 直接调用脚本
      run_setup_script uninstall --path "${script_path}" ${params} ${additional}
    elif ${no_installer}; then
      # 如果文件不是安装脚本，但指定了--no-installer参数，尝试查找文件相同的命令，并删除
      remove_same_file --path "${script_path}" ${all_params} ${additional}
    else
      # 如果文件不上是安装脚本，未指定了--no-installer参数，报错
      echo_fatal "Script path is a file, but not an uninstall script. Use '--no-installer' try to delete command with the same name directly."
    fi
  elif [ -d "${script_path}" ]; then
  # 如果脚本路径是一个目录
    local uninstall_script_filename=$(search_file_by_reg_list "${script_path}" "\.${CMD}.setup(\.sh|\.py|\.rb)?")
    if [[ -n "${uninstall_script_filename}" ]]; then
    # 如果目录中找到安装脚本, 直接掉用那个安装脚本
      run_setup_script uninstall --path "${script_path}/${uninstall_script_filename}" ${params} ${additional}
    elif ${no_installer}; then
    # 没找到那个安装脚本，但指定了--no-installer.查看是否是单脚本APP
      local singl_app_name=$(file_name_if_single "${script_path}" --ignore ${ignore_reg_list[@]})
      if [ -n "${singl_app_name}" ]; then
        remove_same_file --path "${script_path}/${singl_app_name}" ${all_params} ${additional}
      else
        # 如果不是单脚本APP, 不知道如何安装
        echo_fatal "There are mutiple files in script path, but no install script found. ${CMD} don't know how to delete the command."
      fi
    else
    # 如果文件不是安装脚本，未指定了--no-installer参数，报错
      echo_fatal "Can not find a uninstall script. Use '--no-installer' try to delete command with the same file directly."
    fi
  else
  # 既不是文件，也不是目录，无效script_path
    echo_fatal "Invalid script path:${script_path}"
  fi
}


# 根据可执行文件路径，卸载这个可执行文件
function uninstall_by_bin_path()
{
  local bin_path=
  local command=
  local additional=
  
  # 这个函数被调用，说明script_path 必定为空，之前判断过了

  while [ $# -gt 0 ]; do
    case $1 in
      --path )
        shift
        bin_path=$1
      ;;

      --command )
        shift
        command=$1
      ;; 

      *)
        echo_fatal "Invalid params:${$1}"
    esac
    shift
  done


  if [ -f "${bin_path}" ]; then
  # 如果bin_path 是个文件, 直接删除， command 提供验证
    if [ -n "${command}" ]; then
      local filename=$(basename "${bin_path}")
      if [ "${filename}" != "${command}" ]; then
        echo_fatal "Filename name '${filename}' and command '${command}' not matched."
      fi
    fi

    # 强制删除命令
    echo_cmd "${RM} -f ${bin_path}"
    if [ $? != 0 ]; then
      echo_fatal "Fail to uninstall '${command}' on path:${bin_path}"
    fi
  elif [ -d "${bin_path}" ]; then
  # 如果bin_path 是个目录, 则command 不能为空, 根据command删除

    if [ -z "${command}" ]; then
      echo_fatal "Can not find any script in path ${bin_path}"
    fi

    local execute_file_path="${bin_path}/${command}"
    if ! [ -f "${execute_file_path}" ]; then
      echo_file "Script does not exist:${execute_file_path}"
    fi
    # 强制删除命令
    echo_cmd "${RM} -f ${execute_file_path}"
    if [ $? != 0 ]; then
      echo_fatal "Fail to uninstall '${command}' in path:${bin_path}"
    fi
  else
    # 既不是文件，也不是目录，无效bin_path
    echo_fatal "Invalid path:${bin_path}"
  fi
}

###########################################################
# Usage
###########################################################

function usage()
{
cat <<EOF
  usage: ${CMD} <sub-command> <optional>
  Manage command tool

  usage: ${CMD} <sub-command> <--help|-h>
  For detail information for sub-command.

  usage: ${CMD} --help
  For this help information

  The following sub-command are allowed:
  install:      Install a command tool.
  uninstall:    Uninstall a command tool.

  Other options
  Use '${CMD} --help' show this help information
EOF
}

#:~ TODO --script-path 直接改名叫--path
function usage_install()
{
cat <<EOF
  usage: ${CMD} install <command> <optional>
  Install a command

  usage: ${CMD} install --help
  Show this help information

  The following options are availiable:
  --path <path>             Install script or the folder that contains an installation script.
                            If '--no-installerr' is used. '--script-path' can also point to a command
                            script directly.

  --no-installer            If used. '--script-path' can point to a command path or a foler contains a
                            single command file.  ${CMD} will copy the command to destination directly.

  --ignore <reg1> <reg2>..  If '--script-path' point to a folder contains mutiple script but no install
                            script. ${CMD} will not be able to determine which script to install.
                            use '--ignore' and indicate regulars expression to ignore useless files.
  
  --force                   If an existing file on bin-path, remove it.


  The followint options indicate destination path:
  --bin                     The command will be install to '/bin'
  --sbin                    The command will be install to '/sbin'
  --usr-bin                 The command will be install to '/usr/bin'
  --usr-local-bin           The command will be install to '/usr/local/bin'
  --usr-local-sbin          The command will be install to '/usr/local/sbin'
  --custom-dest <path>      Indicate a custom path as destination.

  If none of the above destination paths are specified, ${CMD} will install the command to '/usr/local/bin' as default.


  The followint options use for debug
  --test                    ${CMD} will not execute any comannd but output them into stdout instead.

  --info-level              Command output level. 
                            The specific level can be one of 'silent', 'fatal', 'error', 'verbose',
                            or a number greater than 0.

                            You can use ${CMD} config to get or set it as the global value. 
                              ${CMD} config --write --key info.level --val debug
                              ${CMD} config --read --key info.level

                            Use '${CMD} config --help' to see more information.

  Other options
  Use '${CMD} --help' show all help information
EOF
}

function usage_uninstall()
{
cat <<EOF
  usage: ${CMD} uninstall <command> <optional>
  Uninstall a command

  usage: ${CMD} install --help
  Show this help information

  The following options are availiable:
  --path <path>             Uninstall script or the folder that contains an uninstallation script.
                            If '--no-installerr' is used. '--script-path' can also point to a command
                            script directly, ${CMD} will search the command on system and try to
                            delete it.

  --no-installer            If used. '--script-path' can point to a command path or a foler contains a
                            single command file.  ${CMD} will search the command on system and try to 
                            delete it,

  --ignore <reg1> <reg2>..  If '--script-path' point to a folder contains mutiple script but no uninstall
                            script.  ${CMD} will not be able to determine which script to uninstall.
                            Use '--ignore' and indicate regulars expression to ignore useless files.
  
  --force                   If an existing file on bin-path, remove it.

  --all                     If command installed on mutiple path and not indicate a bin path,
                            ${CMD} will try to delete all of them.


  The followint options indicate destination path:
  --bin                     The command will be uninstall from '/bin'
  --sbin                    The command will be uninstall from '/sbin'
  --usr-bin                 The command will be uninstall from '/usr/bin'
  --usr-local-bin           The command will be uninstall from '/usr/local/bin'
  --usr-local-sbin          The command will be uninstall from '/usr/local/sbin'
  --custom-dest <path>      Indicate a destination path as the bin path.

  If indicate a destination path and the command not installed on that path, ${CMD} will do
  nothing and raise an error.


  The followint options use for debug
  --test                    ${CMD} will not execute any comannd but output them into stdout instead.

  --info-level              Command output level. 
                            The specific level can be one of 'silent', 'fatal', 'error', 'verbose',
                            or a number greater than 0.

                            You can use ${CMD} config to get or set it as the global value. 
                              ${CMD} config --write --key info.level --val debug
                              ${CMD} config --read --key info.level

                            Use '${CMD} config --help' to see more information.

  Other options
  Use '${CMD} --help' show all help information
EOF
}

###########################################################
# Command
###########################################################


function cmd_install()
{
  local script_path=
  local bin_path=
  local -a ignore_reg_list=

  local no_installer=false
  local force=false
  local test=false

  local info_level=
  local show_help=false

  local command=
  if ! [[ "$1" =~ ^-.*$ ]]; then
    command=$1
    shift
  fi

  local is_in_ignore=false
  while [ $# -gt 0 ]; do

    if [[ $1 =~ ^--.*$ ]]; then
      is_in_ignore=false
    fi

		case $1 in

      --path )
        shift
        script_path=$1
      ;;

      --force )
        force=true
      ;;

      --ignore )
        is_in_ignore=true
        force=true
      ;;

      --no-installer )
        no_installer=true
      ;;

      --bin )
        bin_path="${BIN_PATH}"
      ;;

      --sbin )
        bin_path="${SBIN_PATH}"
      ;;

      --usr-bin )
        bin_path="${USR_BIN_PATH}"
      ;;

      --usr-sbin )
        bin_path="${USR_SBIN_PATH}"
      ;;

      --usr-local-bin )
        bin_path="${USR_LOCAL_BIN_PATH}"
      ;;

      --usr-local-sbin )
        bin_path="${USR_LOCAL_SBIN_PATH}"
      ;;

      --custom-dest )
        shift
        bin_path=$1
      ;;

      --test )
        test=true
      ;;

      --info-level )
        shift
        info_level=$1
			;;

      --help | h )
        show_help=true
      ;;

      *)
        if ${is_in_ignore}; then
          ignore_reg_list=("${ignore_reg_list[@]}" "${1}")
        else
          echo_fatal "Unknown params $1. Use '${CMD} info --help' to show help information"
        fi
      ;;
    esac
    shift
  done

  if ${show_help}; then
    usage_install
    exit 0
  else
    if ${test}; then
      TEST_ONLY=true
    fi


    if [ -n "${info_level}" ]; then
      set_info_level "${info_level}"
    fi

    if [ -z "${script_path}" ]; then
      echo_fatal "Script path is empty. Use --help to show more information."
    fi

    if [ -z "${command}" ]; then
      echo_fatal "Command is empty. Use --help to show more information."
    fi

    local params=''
    
    # --bin-path
    if [ -n "${bin_path}" ]; then
      params="${params} --bin-path ${bin_path}"
    else
      if [ -n "${command}" ]; then
        local command_path=$(which "${command}")
        if [ -n "${command_path}" ]; then
          bin_path=$(dirname "${command_path}")
          params="--bin-path ${bin_path}"
        fi
      fi
    fi

    # --command
    if [ -n "${command}" ]; then
      params="${params} --command ${command}"
    fi


    if [ -f "${script_path}" ]; then
    # 如果脚本路径是一个文件
      if echo $(basename ${script_path}) | grep -Eq "\.${CMD}.setup(\.sh|\.py|\.rb)?"; then
      # 如果文件是一个安装脚本, 直接调用脚本
        run_setup_script install --path "${script_path}" ${params}
      elif ${no_installer}; then
      # 如果没有找到安装脚本，但使用了--no-installer参数, 则直接安装文件
        local force_params=''
        if ${force}; then
          force_params='--force'
        fi
        install_file --file "${script_path}" "${force_params}" ${params}
      else
        echo_fatal "Can not find a install script. Use '--no-installer' try to install from a script file directly"
      fi
    elif [ -d "${script_path}" ]; then
      # 如果脚本路径是一个目录
      local script_file_name=$(basename "${script_path}")
      local install_script_filename=$(search_file_by_reg_list "${script_file_name}" "\.${CMD}.setup(\.sh|\.py|\.rb)?")
      if [ -n "${install_script_filename}" ]; then
        # 如果目录中找到安装脚本, 直接掉用那个安装脚本
        run_setup_script install --path "${script_path}/${install_script_filename}" ${params}
      elif ${no_installer}; then
        # 没找到那个安装脚本，但指定了--no-installer.查看是否是单脚本APP
        local singl_app_name=$(file_name_if_single "${script_path}" --ignore ${ignore_reg_list[@]})
        if [ -n "${singl_app_name}" ]; then
          local force_params=''
          if ${force}; then
            force_params='--force'
          fi
          install_file --file "${script_path}/${singl_app_name}" "${force_params}" ${params}
        else
          # 如果不是单脚本APP, 不知道如何安装
          echo_fatal "There are mutiple files in script path, but no install script found. ${CMD} don't know how to install the command."
        fi
      else
      # 如果文件是安装脚本，未指定了--no-installer参数，报错
        echo_fatal "Can not find a install script. Use '--no-installer' try to install file as conmand directly."
      fi
    else
    # 既不是文件，也不是目录，无效script_path
      echo_fatal "Invalid script path:${script_path}"
    fi
  fi




}


function cmd_uninstall()
{
  local bin_path=
  local -a ignore_reg_list=

  local no_installer=false
  local all=false
  local test=false

  local info_level=
  local show_help=false

  local command=
  if ! [[ "$1" =~ ^-.*$ ]]; then
    command=$1
    shift
  fi

  local is_in_ignore=false
  while [ $# -gt 0 ]; do

    if [[ $1 =~ ^--.*$ ]]; then
      is_in_ignore=false
    fi

		case $1 in

      --path )
        shift
        script_path=$1
      ;;

      --no-installer )
        no_installer=true
      ;;

      --all )
        all=true
      ;;

      --ignore )
        is_in_ignore=true
        force=true
      ;;

      --bin )
        bin_path="${BIN_PATH}"
      ;;

      --sbin )
        bin_path="${SBIN_PATH}"
      ;;

      --usr-bin )
        bin_path="${USR_BIN_PATH}"
      ;;

      --usr-sbin )
        bin_path="${USR_SBIN_PATH}"
      ;;

      --usr-local-bin )
        bin_path="${USR_LOCAL_BIN_PATH}"
      ;;

      --usr-local-sbin )
        bin_path="${USR_LOCAL_SBIN_PATH}"
      ;;

      --custom-dest )
        shift
        bin_path=$1
      ;;

      --info-level )
        shift
        info_level=$1
			;;

      --test )
        test=true;
      ;;

      --help | h )
        show_help=true
      ;;

      *)
        if ${is_in_ignore}; then
          ignore_reg_list=("${ignore_reg_list[@]}" "${1}")
        else
          echo_fatal "Unknown params $1. Use '${CMD} --help' to show help information"
        fi
      ;;
    esac
    shift
  done

  if ${show_help}; then
    usage_uninstall
    exit 0
  else
    if ${test}; then
      TEST_ONLY=true
    fi


    if [ -n "${info_level}" ]; then
      set_info_level "${info_level}"
    fi

    if [ -z "${command}" ]; then
      echo_fatal "Command is empty. Use --help to show more information."
    fi


    local params=''
    if [ -n "${command}" ]; then
      params="${params} --command ${command}"
    fi


    if [ -n "${script_path}" ]; then
      # 如果提供了脚本路径

      if [ -n "${bin_path}" ]; then 
        params="${params} --bin-path ${bin_path}"
      fi
      if ${no_installer}; then
        params="${params} --no-installer"
      fi
      if ${all}; then
        params="${params} --all"
      fi

      uninstall_by_script_path --path "${script_path}" ${params} --ignore ${ignore_reg_list[@]}
    elif [ -n "${bin_path}" ]; then
      # 如果没提供脚本路径， 但bin_path不为空

      uninstall_by_bin_path --path "${bin_path}" ${params}
    elif [ -n "${command}" ]; then
      # 如果没提供脚本路径和bin_path, 但提供了command

      if ${all}; then
        params="${params} --all"
      fi

      remove_command ${params}
    else
      echo_fatal "Invalid params, use --help to show more information."
    fi
  fi



}


# PATH=/sbin:/bin


sub_cmd=$1
shift
if [[ -z ${sub_cmd} ]]; then
  echo_fatal "Param error. use '${CMD} --help' to show document"
fi


if [[ "${sub_cmd}" == 'install' ]]; then
  cmd_install $@
elif [[ "${sub_cmd}" == 'uninstall' ]]; then
  cmd_uninstall $@
elif [[ "${sub_cmd}" == '--help' ]] || [[ "${sub_cmd}" == '-h' ]]; then
  usage
  exit 0
else
  echo_fatal "Unknown sub command:'${sub_cmd}'. Use ${CMD} --help tho show help information."
fi