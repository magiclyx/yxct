#!/usr/bin/env bash

CMD=$(basename $0)

BIN_PATH='/bin'
SBIN_PATH='/sbin'
USR_BIN_PATH='/usr/bin'
USR_SBIN_PATH='/usr/sbin'
USR_LOCAL_BIN_PATH='/usr/local/bin'
USR_LOCAL_SBIN_PATH='/usr/local/sbin'
DEFAULT_BIN_PATH="${USR_LOCAL_BIN_PATH}"





#Display comand only, not run
TEST_ONLY=false

##############################################################
# !! 因为yxct不能用YXLib, 下面这些变量必须与yxlogger 中定义的相同
##############################################################
readonly YXCT_LEVEL_SILENT=0
readonly YXCT_LEVEL_FATAL=1
readonly YXCT_LEVEL_ERROR=4
readonly YXCT_LEVEL_WARN=5
readonly YXCT_LEVEL_INFO=8
readonly YXCT_LEVEL_VERBOSE=9
readonly YXCT_LEVEL_DEBUG=11
readonly YXCT_LEVEL_TRACE=12
readonly YXCT_LEVEL_ALL=99

if [ -z "${YXCT_DEFAULT_LEVEL}" ]; then
  YXCT_DEFAULT_LEVEL="${YXCT_LEVEL_ERROR}"
fi


###########################################################
# Ignore file list in script folder
###########################################################

IGNORE_LIST=(
  # git
  "\.gitignore"
  "\.git"
  "\.gitkeep"
  
  ################
  #vim
  # # vim->swap
  "[._]*\.s[a-v][a-z]"
  "[._]*.sw[a-p]"
  "[._]s[a-rt-v][a-z]"
  "[._]ss[a-gi-z]"
  "[._]sw[a-p]"
  # # vim->session
  "Session"
  "Sessionx"
  # # vim->Temporary
  "\.netrwhist"
  "\*~"
  # # vim->Auto-generated tag files
  "tags"
  # # vim->Persistent undo
  "[._]*.un~"
  
  ################
  #vscode
  "\.vscode"
  # # vscode->Local History for Visual Studio Code
  "\.history"
  # # vscode->Built Visual Studio Code Extensions
  ".*\.vsix"
  # # vscode->VisualStudioCode Patch
  "\.history"
  "\.ionide"
  
  # custom
  "README(\.md)?"
  "test(\.sh)?"
  "sample(\.sh)?"
)


###########################################################
# logger
###########################################################
# 第一个参数，必须是script path.
function yxct_run_script()
{
  # get script file path from command
  local script_path=$(echo $@ | awk '{print $1}')
  
  if [ -n "${script_path}" ]; then
    
    # get shebang line from command
    local shebang=$(head -n 1 "${script_path}")
    if echo ${shebang} | grep -Eq "^#!.*"; then
      # if shebang exist, call commmand directly
      echo_cmd "eval $@"
    else
      # try get file extension name
      local file_ext=${script_path##*.}

      # call command by extension name
      if [ -n "${file_ext}" ]; then
        if strcontains "${file_ext}" "sh" --ignorecase; then
          echo_cmd "eval ${BASH} $@"
        elif strcontains "${file_ext}" "py" --ignorecase; then
          echo_cmd "eval ${ENV} python3 $@"
        else
          echo_cmd "eval $@"
        fi
      fi

    fi # end of (echo ${title} | grep -Eq "^#!.*"; then)
  fi # end of (if [ -n "${script_path}" ]; then)
}


###########################################################
# YXLib
###########################################################

function os_type()
{
  
  local release=''
  
  if [ -n "${OSTYPE}" ]; then
    if [[ "${OSTYPE}" == "linux-gnu"* ]]; then
      release="linux"
    elif [[ "${OSTYPE}" == "bsd"* ]]; then 
      release="bsd"
    elif [[ "${OSTYPE}" == "freebsd"* ]]; then 
      release="freebsd"
    elif [[ "${OSTYPE}" == "darwin"* ]]; then 
      release="osx"
    elif [[ "${OSTYPE}" == "solaris"* ]]; then 
      release="solaris"
    elif [[ "${OSTYPE}" == "cygwin" ]]; then 
      # POSIX compatibility layer and Linux environment emulation for Windows 
      release="cygwin"
    elif [[ "${OSTYPE}" == "msys" ]]; then 
      # Lightweight shell and GNU utilities compiled for Windows (part of MinGW) 
      release="msys"
    elif [[ "${OSTYPE}" == "win32" ]]; then 
      # I'm not sure this can happen. 
      release="windows"
    else 
      release="unknown"
    fi
  else
    
    # $OSTAYPE not recognized by the older shells (such as Bourne shell).
    # Use `uname` instead
    
    case $(uname | tr '[:upper:]' '[:lower:]') in
      linux*)
        release='linux'
      ;;
      freebsd*)
        release='freebsd'
      ;;
      darwin*)
        release="osx"
      ;;
      SunOS*)
        release="solaris"
      ;;
      msys*)
        release="msys"
      ;;
      windows*)
        release="windows"
      ;;
      *)
        release="unknown"
      ;;
    esac
  fi
  

  echo "${release}"
}

function echo_verbose()
{
  if (( "${YXCT_DEFAULT_LEVEL}" < "${YXCT_LEVEL_VERBOSE}" )); then
    return
  fi

  (>&1 echo "$1")
}

function echo_fatal()
{
  if (( "${YXCT_DEFAULT_LEVEL}" < "${YXCT_LEVEL_FATAL}" )); then
    return
  fi

  local red=$(tput setaf 1);
  local reset=$(tput sgr0);
  
  (>&2 echo "${red}Fatal:${1}${reset}");
  exit 1;
}


function echo_cmd()
{
  if ${TEST_ONLY}; then
    echo_verbose "Test-only:$*"
    return
  else
    echo_verbose "$*"
  fi

  $@
}

function echo_err()
{
  if (( "${YXCT_DEFAULT_LEVEL}" < "${YXCT_LEVEL_ERROR}" )); then
    return
  fi

  local magenta=$(tput setaf 5);
  local reset=$(tput sgr0);

  (>&2 echo "${magenta}${1}${reset}")
}

function yx_str_checkfmt()
{
  local reg=$1
  local str=$2
  
  if [[ -z ${str} ]]; then
    str=''
  fi
  
  if [[ -z ${reg} ]]; then
    reg='^\s*[^\s]+\s*$'
  fi
  
  if ! [[ ${str} =~ ${reg} ]] ; then
    return 1
  fi
  
  return 0
}

function strcontains()
{
  local str="$1"
  local arr_str="$2"
  local ignorecase=false
  shift 
  shift 
  
  while [ $# -gt 0 ]; do
    case $1 in
      
      --ignorecase )
        ignorecase=true
      ;;
      
      *)
        echo "Invalid optional ${1}"
      ;;
    esac
    shift
  done

  
  if ${ignorecase}; then
    if [[ $(yx_shell_type) == 'bash' ]]; then
      for e in $(echo "${arr_str}"); do
        [[ "${e^^}" == "${str^^}" ]] && return 0
      done
    else
      for e in $(echo "${arr_str}"); do
        [[ "${e:u}" == "${str:u}" ]] && return 0
      done
    fi
  else
    for e in $(echo "${arr_str}"); do
      echo "compare between ${e} and ${str}"
      [[ "${e}" == "${str}" ]] && return 0
    done
  fi
  
  return 1
}

function yx_shell_type()
{
  local shell_type=
  if [ -n "${ZSH_VERSION}" ]; then
    shell_type='zsh'
  elif [ -n "${BASH_VERSION}" ]; then
    shell_type='bash'
  else
    :
  fi

  echo "${shell_type}"
}

###########################################################
# Utility
###########################################################

function set_info_level()
{
  local info_level=$1
  if [ -n "${info_level}" ]; then

    if yx_str_checkfmt '^([0-9])+$' "${info_level}"; then
      YXCT_DEFAULT_LEVEL="${info_level}"
      export YXLOGGER_DEFAULT_LEVEL="${info_level}"
    elif strcontains "${info_level}" 'silent' --ignorecase; then
      YXCT_DEFAULT_LEVEL=${YXCT_LEVEL_SILENT}
      export YXLOGGER_DEFAULT_LEVEL="${YXCT_LEVEL_SILENT}"
    elif strcontains "${info_level}" 'fatal fat' --ignorecase; then
      YXCT_DEFAULT_LEVEL=${YXCT_LEVEL_FATAL}
      export YXLOGGER_DEFAULT_LEVEL="${YXCT_LEVEL_FATAL}"
    elif strcontains "${info_level}" 'error err' --ignorecase; then
      YXCT_DEFAULT_LEVEL=${YXCT_LEVEL_ERROR}
      export YXLOGGER_DEFAULT_LEVEL="${YXCT_LEVEL_ERROR}"
    elif strcontains "${info_level}" 'warning warn' --ignorecase; then
      YXCT_DEFAULT_LEVEL=${YXCT_LEVEL_WARN}
      export YXLOGGER_DEFAULT_LEVEL="${YXCT_LEVEL_WARN}"
    elif strcontains "${info_level}" 'info msg' --ignorecase; then
      YXCT_DEFAULT_LEVEL=${YXCT_LEVEL_INFO}
      export YXLOGGER_DEFAULT_LEVEL="${YXCT_LEVEL_INFO}"
    elif strcontains "${info_level}" 'verbose verb' --ignorecase; then
      YXCT_DEFAULT_LEVEL=${YXCT_LEVEL_VERBOSE}
      export YXLOGGER_DEFAULT_LEVEL="${YXCT_LEVEL_VERBOSE}"
    elif strcontains "${info_level}" 'debug' --ignorecase; then
      YXCT_DEFAULT_LEVEL=${YXCT_LEVEL_DEBUG}
      export YXLOGGER_DEFAULT_LEVEL="${YXCT_LEVEL_DEBUG}"
    elif strcontains "${info_level}" 'trace' --ignorecase; then
      YXCT_DEFAULT_LEVEL=${YXCT_LEVEL_TRACE}
      export YXLOGGER_DEFAULT_LEVEL="${YXCT_LEVEL_TRACE}"
    elif strcontains "${info_level}" 'all' --ignorecase; then
      YXCT_DEFAULT_LEVEL=${YXCT_LEVEL_ALL}
      export YXLOGGER_DEFAULT_LEVEL="${YXCT_LEVEL_ALL}"
    else
      yx_fatal "unknown info level :${info_level}"
    fi # end of (if yx_check_strfmt '^([0-9])+$' "${info_level}"; then)

  fi # end of 'if [ -n ${info_level} ]'
}


function is_in_reg_list()
{
  local name=$1
  shift
  local reg_list=($@)
  
  if [[ "${reg_list}" ]]; then
    for reg in "${reg_list[@]}"; do
      reg=$(echo "${reg}" | grep -o "[^ ]\+\( \+[^ ]\+\)*")
      if echo "${name}" | grep -Eqi "${reg}"; then
        return 0
      fi
    done
  fi
  
  return 1
}


# 如果目录下只有一个文件，则返回
# 1. 会忽略 IGNORE_LIST 列表里正则对应的文件
# 2. 会忽略 --ignore 参数中正则列表对应的文件
# usage: file_name_if_single <目录>
# usage: file_name_if_single <目录> --ignore '正则1' '正则2' ....
function file_name_if_single()
{
  local script_path=$1
  local -a ignore_reg_list
  if [[ $2 == '--ignore' ]]; then
    shift # ignore $1
    shift # ignore --ignore
    ignore_reg_list=($@)
  fi

  
  local -a valid_files
  # local SAVEIFS=$IFS
  for file in "${script_path%\/}"/*; do

    if [[ ${file} =~ ^"${script_path%\/}"/*$ ]]; then
      continue
    fi

    local filename=$(basename  "${file}")    

    # 文件名在忽略列表里
    if is_in_reg_list "${filename}" ${ignore_reg_list[@]}; then
      continue
    fi

    if ! is_in_reg_list "${filename}" ${IGNORE_LIST[@]}; then
      valid_files=(${valid_files[@]} "${filename}")
    fi
    
  done
  # IFS=${SAVEIFS}
  
  if [[ "${#valid_files[@]}" == 1 ]]; then
    echo "${valid_files[@]}"
    return 0
  else
    return 1
  fi
}

function search_file_by_reg_list()
{
  local path=$1
  shift
  local reg_list=($@)

  # local SAVEIFS=$IFS


  # search regular files
  for file in "${script_path%\/}"/*; do

    if [[ ${file} =~ ^"${script_path%\/}"/*$ ]]; then
      continue
    fi

    local filename=$(basename "${file}")    
    if is_in_reg_list "${filename}" ${reg_list[@]}; then
      echo "${filename}"
      return 0
    fi
  done

  # search regular invisiable files 
  for file in "${script_path%\/}"/.*; do
    if [[ ${file} == ${script_path%/}/\* ]]; then
      continue
    fi

    local filename=$(basename "${file}")    
    if [[ ${filename} == '.' ]] || [[ ${filename} == '..' ]]; then
      continue
    fi

    if is_in_reg_list "${filename}" ${reg_list[@]}; then
      echo "${filename}"
      return 0
    fi
  done


  # IFS=${SAVEIFS}

  return 1
}



# function is_same_file()
# {
#   local file1=$1
#   local file2=$2

#   local file1_hash=
#   if [ -r "${file1}" ]; then
#     file1_hash=$(shasum -a 256 "${file1}")
#   fi

#   local file2_hash=
#   if [ -r ${file2} ]; then
#     file2_hash=$(shasum -a 256 "${file2}")
#   fi

#   if [[ -f "${file1}" ]] && [[ -f "${file2}" ]]; then
#     if [[ "${file1}" -eq "${file2}" ]]; then
#       return 0
#     fi
#   fi

#   return 1
# }


function check_file_hash()
{
  local file=$1
  local hash=$2

  if ! [ -r "${file}" ]; then
    echo_fatal "Can not read the file:${file}"
  fi

  if [ -z "${hash}" ]; then
    echo_fatal "hash is empty."
  fi

  local file_hash=$(shasum -a 256 "${file}" | awk '{print $1}')
  if [[ "${file_hash}" == "${hash}" ]]; then
    return 0
  else
    return 1
  fi
}

# 执行卸载脚本
function run_setup_script()
{
  local script_path=
  local bin_path=
  local additional=
  local all=false

  local option=$1
  if strcontains "${option}" 'install' --ignorecase; then
    option="install"
    shift
  elif strcontains "${option}" 'uninstall' --ignorecase; then
    option="uninstall"
    shift
  else
    echo_fatal "option is empty."
  fi

  while [ $# -gt 0 ]; do
    case $1 in
      --path )
        shift
        script_path=$1
      ;;

      --bin-path )
        shift
        bin_path=$1
      ;;

      --all )
        all=true
      ;;


      *)
        additional="${additional} $1"
    esac
    shift
  done


  if ! [ -f "${script_path}" ]; then
    echo_fatal "setup script not exist :${script_path}"
  fi
  
  if ! [ -x "${script_path}" ]; then
    echo_err "Setup script does not have execution permissions. try add one."
    echo_cmd "chmod +x ${script_path}"
  fi


  # 因为运行脚本，很可能使用了YXLib库，这里让运行脚本
  # 这里了设置yxlogger的环境变量
  local saved_yxlib_log_echo_level="${YXLOGGER_DEFAULT_LEVEL}"
  if [ -n "${YXCT_DEFAULT_LEVEL}" ]; then
    # 保存之前的环境变量
    export YXLOGGER_DEFAULT_LEVEL="${YXCT_DEFAULT_LEVEL}"
  fi


  local result
  if [ -n "${bin_path}" ]; then
  # 如果给了bin_path, 则按照 bin_path 给卸载脚本
    pushd $(dirname "${script_path}") > /dev/null
    yxct_run_script "${script_path} ${option} --bin-path ${bin_path} ${additional}"
    result="$?"
    popd > /dev/null

    if [[ "${result}" != '0' ]]; then
      echo_fatal "Failed to run setup script: ${script_path}"
    fi
  elif which "${command}" > /dev/null; then
  # else
  # 如果能找到 command, 根据command获得bin-path
    while true; do

      local finded_exec_path=$(which "${command}")
      if [ -z "${finded_exec_path}" ]; then
        break
      fi
      
      local bin_path=$(dirname "${finded_exec_path}")

      pushd $(dirname "${script_path}") > /dev/null
      yxct_run_script "${script_path} ${option} --bin-path ${bin_path} ${additional}"
      result="$?"
      popd > /dev/null    

      if [[ "${result}" != '0' ]]; then
        echo_fatal "Failed to run setup script: ${script_path}"
      fi

      if ! ${all}; then
        break
      fi
    done
  
  else
    # 如果没找到command, 完全不知道 --bin-path , 直接调用脚本
    pushd $(dirname "${script_path}") > /dev/null
    yxct_run_script "${script_path} ${option} ${additional}"
    result="$?"
    popd > /dev/null

    if [[ "${result}" != '0' ]]; then
      echo_fatal "Failed to run setup script: ${script_path}"
    fi
  fi


  # 这里要还原 YXLOGGER_DEFAULT_LEVEL
  # 使用和备份时相同的判断条件
  if [ -n "${YXCT_DEFAULT_LEVEL}" ]; then
    export YXLOGGER_DEFAULT_LEVEL="${saved_yxlib_log_echo_level}"
  fi



  # pushd $(dirname "${script_path}") > /dev/null
  # yxct_run_script "${script_path} ${option} ${additional}"
  # result="$?"
  # popd > /dev/null

  # if [[ "${result}" != '0' ]]; then
  #   echo_fatal "Failed to run setup script: ${script_path}"
  # fi

  return ${result}
}

# 根据命令名直接卸载可执行文件
function remove_command()
{
  local all=false
  local command=
  local hash=

  while [ $# -gt 0 ]; do
    case $1 in
      --command )
        shift
        command=$1
      ;; 

      --hash )
        shift
        hash=$1
      ;; 

      --all )
        all=true
      ;; 
    esac
    shift
  done

  if [ -z "${command}" ]; then
    echo_fatal "Command is empty !"
  fi

  # 提前额外验证一下， while循环里的验证不能抱错误警告
  if ! $(which "${command}" > /dev/null); then
    echo_fatal "Can not find the command:${command}"
  fi

  while true; do
    local finded_exec_path=$(which "${command}")
    if [ -z "${finded_exec_path}" ]; then
      break
    fi

    if ! [ -w ${finded_exec_path} ]; then
     echo_fatal "Have not permission to remove the file:${finded_exec_path}"
    fi

    if [ -n "${hash}" ]; then
      if ! check_file_hash "${finded_exec_path}" "${hash}"; then
        break
      fi
    fi

    # 强制删除命令
    echo_cmd "${RM} -f ${finded_exec_path}"
    if [[ $? != '0' ]]; then
      echo_fatal "Fail to uninstall '${command}'"
    fi

    if ! ${all}; then
      break
    fi

  done
}

# 根据一个可执行文件，查找安装的命令，并卸载
# 可执行文件仅用于 hash验证
# 查找方式
# 1. which ${command}
# 2. bin_path/command 或 bin_path/$(basename command)
function remove_by_hash_file()
{
    local file_path=
    local bin_path=
    local command=
    local all=false

    while [ $# -gt 0 ]; do
      case $1 in
        --path )
          shift
          file_path=$1
        ;;

        --bin-path )
          shift
          bin_path=$1
        ;;

        --command )
          shift
          command=$1
        ;; 

        --all )
          all=true
        ;; 
      esac
      shift
    done

    if ! [ -f "${file_path}" ]; then
      echo_fatal "File not exist :${file_path}"
    fi
    local file_hash=$(shasum -a 256 "${file_path}" | awk '{print $1}' )
    if [ -z "${file_hash}" ]; then
      echo_fatal "Failed to calculate the hash value of the file:${file_path}"
    fi

    local filename=$(basename "${file_path}")
    # 如果提供了命令名，脚本名字和命令名必须相同
    if [ -n "${command}" ] && [ "${filename}" != "${command}" ]; then
      echo_fatal "Filename name and command not matched."
    fi

    if [ -n "${bin_path}" ]; then

      local finded_exec_path=
      if [ -n "${command}" ]; then
        finded_exec_path="${bin_path}/${command}"
      else
        finded_exec_path="${bin_path}/${filename}"
      fi

      if ! [ -f ${finded_exec_path} ]; then
        echo_fatal "Can not find a command at:${finded_exec_path}"
      fi

      # 要删除的文件必须和传入的文件相同
      if ! check_file_hash "${finded_exec_path}" "${file_hash}"; then
        echo_fatal "Script and execute file not matched:(${execute_file_path})"
      fi

      # 强制删除命令
      echo_cmd "${RM} -f ${execute_file_path}"
      if [[ $? != 0 ]]; then
        echo_fatal "Fail to uninstall '${command}' in path:${bin_path}"
      fi
   else
     local params=''
     if "${all}"; then
       arams="${params} --all"
     fi

     remove_command --command "${filename}" --hash "${file_hash}" ${params}
   fi
}


function install_file()
{
  local file_path=
  local bin_path=
  local command=
  local force=false

  while [ $# -gt 0 ]; do
    case $1 in
      --file )
        shift
        file_path=$1
      ;;

      --bin-path )
        shift
        bin_path=$1
      ;;

      --command )
        shift
        command=$1
      ;;

      --force )
        force=true
      ;;
    esac
    shift
  done

  if [ -z "${file_path}" ]; then
    echo_fatal "file path is empty."
  fi

  if ! [ -r "${file_path}" ]; then
    echo_fatal "Can not read file:${file_path}"
  fi

  if [ -z ${bin_path} ]; then
    echo_fatal "destination path is empty."
  fi

  if [ -z "${command}" ]; then
    command=$(basename "${file_path}")
  fi

  local dest_path="${bin_path}/${command}"

  # 在没有指定--force时，如果目标文件已存在，且和要考呗的文件不同，则fatal
  if [ -f "${dest_path}" ] && ! ${force}; then
    local file_hash=$(shasum -a 256 "${file_path}" | awk '{print $1}')
    if ! check_file_hash "${dest_path}" "${file_hash}"; then
      echo_fatal "file already exist on dest path:${dest_path}. Use --force to overwrite the exist file"
    fi
  fi


  # 之前已经验证过 force了，这里仍然判断force参数， 避免多脚本同时执行
  local force_params=''
  if ${force}; then
    force_params='-f'
  fi

  echo_cmd "${CP} ${force_params} ${file_path} ${bin_path}/${command}"
}


# 根据安装脚本路径，卸载可执行文件
function uninstall_by_script_path()
{
  local script_path=
  local additional=
  local bin_path=
  local command=

  local -a ignore_reg_list=
  local all=false

  local is_in_ignore=false
  while [ $# -gt 0 ]; do

    if [[ $1 =~ ^--.*$ ]]; then
      is_in_ignore=false
    fi

    case $1 in
      --path )
        shift
        script_path=$1
      ;;

      --command )
        shift
        command=$1
      ;;

      --bin-path )
        shift
        bin_path=$1
      ;;

      --ignore )
        is_in_ignore=true
        force=true
      ;;

      --all )
        all=true
      ;;

      *)
        if ${is_in_ignore}; then
          ignore_reg_list=("${ignore_reg_list[@]}" "${1}")
        else
          additional="${additional} $1"
        fi
    esac
    shift
  done

  if [ -z "${script_path}" ]; then
    echo_fatal "Script path is empty."
  fi

  # local all_params=''
  # if "${all}"; then
  #   all_params='--all'
  # fi

  local params=''
  #--command
  if [ -n "${command}" ]; then
    params="${params} --command ${command}"
  fi

  if [ -n "${bin_path}" ]; then
    params="${params} --bin-path ${bin_path}"
  fi

  if ${all}; then
    params="${params} --all"
  fi
  

  if [ -f "${script_path}" ]; then

  local script_file_name=$(basename "${script_path}")
  # 如果脚本路径是一个文件
    if echo "${script_file_name}" | grep -Eq "\.${CMD}.setup(\.sh|\.py|\.rb)?"; then
    # 如果文件是一个安装脚本, 直接调用脚本
      run_setup_script uninstall --path "${script_path}" ${params} ${additional}
    else
      # 如果文件不是安装脚本，尝试使用 command 和 bin_path卸载。 并用这个文件做hash验证并卸载，并删除
      remove_by_hash_file --path "${script_path}" ${params} ${additional}
    fi
  elif [ -d "${script_path}" ]; then
  # 如果脚本路径是一个目录
    local uninstall_script_filename=$(search_file_by_reg_list "${script_path}" "\.${CMD}.setup(\.sh|\.py|\.rb)?")
    if [[ -n "${uninstall_script_filename}" ]]; then
    # 如果目录中找到安装脚本, 直接掉用那个安装脚本
      run_setup_script uninstall --path "${script_path%\/}/${uninstall_script_filename}" ${params} ${additional}
    else
    # 没找到那个安装脚本，查看是否是单脚本APP
      local singl_app_name=$(file_name_if_single "${script_path}" --ignore ${ignore_reg_list[@]})
      if [ -n "${singl_app_name}" ]; then
        # 如果文件夹下只找到一个文件，尝试使用 command 和 bin_path卸载。并使用这个文件做 hash 验证.
        remove_by_hash_file --path "${script_path%\/}/${singl_app_name}" ${params} ${additional}
      else
        # 如果不是单脚本APP, 不知道如何安装
        echo_fatal "There are mutiple files in script path, but no install script found. ${CMD} don't know how to delete the command."
      fi
    fi
  else
  # 既不是文件，也不是目录，无效script_path
    echo_fatal "Invalid script path:${script_path}"
  fi
}


# 根据可执行文件路径，卸载这个可执行文件
function uninstall_by_bin_path()
{
  local bin_path=
  local command=
  local additional=
  
  # 这个函数被调用，说明script_path 必定为空，之前判断过了

  while [ $# -gt 0 ]; do
    case $1 in
      --path )
        shift
        bin_path=$1
      ;;

      --command )
        shift
        command=$1
      ;; 

      *)
        echo_fatal "Invalid params:${$1}"
    esac
    shift
  done


  if [ -f "${bin_path}" ]; then
  # 如果bin_path 是个文件, 直接删除， command 提供验证
    if [ -n "${command}" ]; then
      local filename=$(basename "${bin_path}")
      if [[ "${filename}" != "${command}" ]]; then
        echo_fatal "Filename name '${filename}' and command '${command}' not matched."
      fi
    fi

    # 强制删除命令
    echo_cmd "${RM} -f ${bin_path}"
    if [[ $? != 0 ]]; then
      echo_fatal "Fail to uninstall '${command}' on path:${bin_path}"
    fi
  elif [ -d "${bin_path}" ]; then
  # 如果bin_path 是个目录, 则command 不能为空, 根据command删除

    if [ -z "${command}" ]; then
      echo_fatal "Can not find any script in path ${bin_path}"
    fi

    local execute_file_path="${bin_path}/${command}"
    if ! [ -f "${execute_file_path}" ]; then
      echo_file "Script does not exist:${execute_file_path}"
    fi
    # 强制删除命令
    echo_cmd "${RM} -f ${execute_file_path}"
    if [[ $? != 0 ]]; then
      echo_fatal "Fail to uninstall '${command}' in path:${bin_path}"
    fi
  else
    # 既不是文件，也不是目录，无效bin_path
    echo_fatal "Invalid path:${bin_path}"
  fi
}

###########################################################
# Usage
###########################################################

function usage()
{
cat <<EOF
  usage: ${CMD} <sub-command> <optional>
  Manage command tool

  usage: ${CMD} <sub-command> <--help|-h>
  For detail information for sub-command.

  usage: ${CMD} --help
  For this help information

  The following sub-command are allowed:
  install:      Install a command tool.
  uninstall:    Uninstall a command tool.

  Other options
  Use '${CMD} uninstall --help' show this help information
EOF
}

function usage_install()
{

  function __usage_install_destination_info()
  {
    if [[ "$(os_type)" == 'osx' ]]; then
cat << EOF
  --usr-local-bin           The command will be install to'/usr/local/bin' (It's the default optional)
  --custom-dest <path>      Indicate a custom path as destination.

  Note: If none of the above destination paths are specified, ${CMD} will install
        the command to '/usr/local/bin' as default.
  
  Un-support destination options on OSX:
  --bin                     On OSX, this option will point to '/usr/loca/bin'
  --sbin                    On OSX, this option will point to '/usr/loca/bin'
  --usr-bin                 On OSX, this option will point to '/usr/loca/bin'
  --usr-local-sbin          On OSX, this option will point to '/usr/loca/bin'
EOF
    else
cat << EOF
  --bin                     The command will be install to '/bin'
  --sbin                    The command will be install to '/sbin'
  --usr-bin                 The command will be install to '/usr/bin'
  --usr-local-bin           The command will be install to '/usr/local/bin'
  --usr-local-sbin          The command will be install to '/usr/local/sbin'
  --custom-dest <path>      Indicate a custom path as destination.

  Note: If none of the above destination paths are specified, ${CMD} will install the
        command to '/usr/local/bin' as default.
EOF
    fi
  }


cat <<EOF
  usage: ${CMD} install <command> <optional>
  Install a command

  usage: ${CMD} install --help
  Show this help information

  The following options are availiable:
  --path <path>             1. Point to an install script or a folder that contains an install script.
                            2. Point to a command file, ${CMD} will try to install the command to system.

  --ignore <reg1> <reg2>..  If '--path' point to a folder contains mutiple script but there is no install
                            script there. ${CMD} will not be able to determine which script to install.
                            use '--ignore' and indicate regulars expression to ignore useless files.
  
  --force                   If an existing file on bin-path, remove it.


  The followint options indicate destination path:
$(__usage_install_destination_info)
  

  The followint options use for debug
  --test                    ${CMD} will not execute any comannd but output them into stdout instead.

  --info-level              Command output level. 
                            The specific level can be one of 'silent', 'fatal', 'error', 'verbose',
                            or a number greater than 0.

  Other options
  Use '${CMD} install --help' show all help information
EOF
}

function usage_uninstall()
{

  function __usage_install_destination_info()
  {
    if [[ "$(os_type)" == 'osx' ]]; then
cat << EOF
  --usr-local-bin           The command will be uninstall from '/usr/local/bin' (It's the default optional)
  --custom-dest <path>      Indicate a custom path as target path.

  Note: If indicate a target path but the command not installed on that path, ${CMD} will do
        nothing and raise an error.
  
  Un-support target options on OSX:
  --bin                     On OSX, this option will point to '/usr/loca/bin'
  --sbin                    On OSX, this option will point to '/usr/loca/bin'
  --usr-bin                 On OSX, this option will point to '/usr/loca/bin'
  --usr-local-sbin          On OSX, this option will point to '/usr/loca/bin'
EOF
    else
cat << EOF
  --bin                     The command will be uninstall from '/bin'
  --sbin                    The command will be uninstall from '/sbin'
  --usr-bin                 The command will be uninstall from '/usr/bin'
  --usr-local-bin           The command will be uninstall from '/usr/local/bin'
  --usr-local-sbin          The command will be uninstall from '/usr/local/sbin'
  --custom-dest <path>      Indicate a custom path as target.

  Note: If indicate a target path but the command not installed on that path, ${CMD} will do
        nothing and raise an error.
EOF
    fi
  }

cat <<EOF
  usage: ${CMD} uninstall <command> <optional>
  Uninstall a command

  usage: ${CMD} uninstall --help
  Show this help information

  The following options are availiable:
  --path <path>             1. point to an uninstall script or a folder that contains an uninstall script.
                            2. point to a command file, ${CMD} will try to uninstall a same command on system.

  --ignore <reg1> <reg2>..  If '--path' point to a folder contains mutiple script but there is no uninstall
                            script there.  ${CMD} will not be able to determine which script to uninstall.
                            Use '--ignore' and indicate regulars expression to ignore useless files.
  
  --all                     If command installed on mutiple path and not indicate a target,
                            ${CMD} will try to delete all of them.


  The followint options indicate target path:
$(__usage_install_destination_info)


  The followint options use for debug
  --test                    ${CMD} will not execute any comannd but output them into stdout instead.

  --info-level              Command output level. 
                            The specific level can be one of 'silent', 'fatal', 'error', 'verbose',
                            or a number greater than 0.

  Other options
  Use '${CMD} --help' show all help information
EOF
}

###########################################################
# Command
###########################################################


function cmd_install()
{
  local script_path=
  local bin_path=
  local -a ignore_reg_list=
  local additional=

  local force=false
  local test=false

  local info_level=
  local show_help=false

  local command=
  if ! [[ "$1" =~ ^-.*$ ]]; then
    command=$1
    shift
  fi

  local is_in_ignore=false
  while [ $# -gt 0 ]; do

    if [[ $1 =~ ^--.*$ ]]; then
      is_in_ignore=false
    fi

    case $1 in

      --path )
        shift
        script_path=$1
      ;;

      --force )
        force=true
      ;;

      --ignore )
        is_in_ignore=true
        force=true
      ;;

      --bin )
        bin_path="${BIN_PATH}"
      ;;

      --sbin )
        bin_path="${SBIN_PATH}"
      ;;

      --usr-bin )
        bin_path="${USR_BIN_PATH}"
      ;;

      --usr-sbin )
        bin_path="${USR_SBIN_PATH}"
      ;;

      --usr-local-bin )
        bin_path="${USR_LOCAL_BIN_PATH}"
      ;;

      --usr-local-sbin )
        bin_path="${USR_LOCAL_SBIN_PATH}"
      ;;

      --custom-dest )
        shift
        bin_path=$1
      ;;

      --test )
        test=true
      ;;

      --info-level )
        shift
        info_level=$1
      ;;

      --help | h )
        show_help=true
      ;;

      *)
        if ${is_in_ignore}; then
          ignore_reg_list=("${ignore_reg_list[@]}" "${1}")
        else
          additional="${additional} $1"
        fi
      ;;
    esac
    shift
  done


  if ${show_help}; then
    usage_install
    exit 0
  else
    if ${test}; then
      TEST_ONLY=true
    fi


    if [ -n "${info_level}" ]; then
      set_info_level "${info_level}"
    fi

    if [ -z "${script_path}" ]; then
      echo_fatal "Script path is empty. Use --help to show more information."
    fi

    if [ -z "${command}" ]; then
      echo_fatal "Command is empty. Use --help to show more information."
    fi


    if [ -z "${bin_path}" ]; then
      bin_path="${DEFAULT_BIN_PATH}"
    fi

    local params=''

    # --command
    if [ -n "${command}" ]; then
      params="${params} --command ${command}"
    fi
    
    # --bin-path
    if [ -n "${bin_path}" ]; then
      params="${params} --bin-path ${bin_path}"
    fi



    if [ -f "${script_path}" ]; then
    # 如果脚本路径是一个文件

      local script_file_name=$(basename ${script_path})
      if echo "${script_file_name}" | grep -Eq "\.${CMD}.setup(\.sh|\.py|\.rb)?"; then
      # 如果文件是一个安装脚本, 直接调用脚本
        run_setup_script install --path "${script_path}" ${params} ${additional}
      else
      # 如果文件是不是一个安装脚本

        local force_params=''
        if ${force}; then
          force_params='--force'
        fi

        if [[ "${script_file_name}" == "${command}" ]] ||  [[ "${script_file_name%.*}" == "${command}" ]]; then
        # 如果'--path'指向的文件与要安装的'command'名字相同(或去掉扩展名后相同), 则安装文件
          install_file --file "${script_path}" "${force_params}" ${params}
        else
        # '--path'指向文件名与'command'不同的情况下，验证是否指定了 ‘--strict’ 参数. 没指定则强制安装文件, 并改名为command.
          install_file --file "${script_path}" "${force_params}" ${params}
        fi

      fi
    elif [ -d "${script_path}" ]; then
      # 如果脚本路径是一个目录
      local script_file_name=$(basename "${script_path}")
      local install_script_filename=$(search_file_by_reg_list "${script_file_name}" "\.${CMD}.setup(\.sh|\.py|\.rb)?")
      if [ -n "${install_script_filename}" ]; then
        # 如果目录中找到安装脚本, 直接掉用那个安装脚本
        run_setup_script install --path "${script_path%\/}/${install_script_filename}" ${params} ${additional}
      else

        local singl_app_name=$(file_name_if_single "${script_path}" --ignore ${ignore_reg_list[@]})
        if [ -n "${singl_app_name}" ]; then
        # 如果目录中文件，去掉白名单的文件和--ignore正则指定忽略的文件后，只剩下一个文件

          local force_params=''
          if ${force}; then
            force_params='--force'
          fi
           
          if [[ "${singl_app_name}" == "${command}" ]] ||  [[ "${singl_app_name%.*}" == "${command}" ]]; then
          # 如果这唯一的文件与要安装的'command'名字相同(或去掉扩展名后相同), 则安装文件
            install_file --file "${script_path%\/}/${singl_app_name}" "${force_params}" ${params}
          else
          # 这唯一的文件与'command'名字不同的情况下，没指定则强制安装文件, 并改名为command.
            install_file --file "${script_path%\/}/${singl_app_name}" "${force_params}" ${params}
          fi
        else
          # 如果目录中文件，去掉白名单的文件和--ignore正则指定忽略的文件后，还有多个文件，则不知道如何安装, 直接报错
          echo_fatal "There are mutiple files in script path, but no install script found. ${CMD} don't know how to install the command."
        fi

      fi
    else
    # 既不是文件，也不是目录，无效script_path
      echo_fatal "Invalid script path:${script_path}"
    fi
  fi




}


function cmd_uninstall()
{
  local bin_path=
  local -a ignore_reg_list=
  local additional=

  local all=false
  local test=false

  local info_level=
  local show_help=false

  local command=
  if ! [[ "$1" =~ ^-.*$ ]]; then
    command=$1
    shift
  fi

  local is_in_ignore=false
  while [ $# -gt 0 ]; do

    if [[ $1 =~ ^--.*$ ]]; then
      is_in_ignore=false
    fi

    case $1 in

      --path )
        shift
        script_path=$1
      ;;

      --all )
        all=true
      ;;

      --ignore )
        is_in_ignore=true
        force=true
      ;;

      --bin )
        bin_path="${BIN_PATH}"
      ;;

      --sbin )
        bin_path="${SBIN_PATH}"
      ;;

      --usr-bin )
        bin_path="${USR_BIN_PATH}"
      ;;

      --usr-sbin )
        bin_path="${USR_SBIN_PATH}"
      ;;

      --usr-local-bin )
        bin_path="${USR_LOCAL_BIN_PATH}"
      ;;

      --usr-local-sbin )
        bin_path="${USR_LOCAL_SBIN_PATH}"
      ;;

      --custom-dest )
        shift
        bin_path=$1
      ;;

      --info-level )
        shift
        info_level=$1
      ;;

      --test )
        test=true;
      ;;

      --help | h )
        show_help=true
      ;;

      *)
        if ${is_in_ignore}; then
          ignore_reg_list=("${ignore_reg_list[@]}" "${1}")
        else
          additional="${additional} $1"
        fi
      ;;
    esac
    shift
  done

  if ${show_help}; then
    usage_uninstall
    exit 0
  else
    if ${test}; then
      TEST_ONLY=true
    fi


    if [ -n "${info_level}" ]; then
      set_info_level "${info_level}"
    fi

    if [ -z "${command}" ]; then
      echo_fatal "Command is empty. Use --help to show more information."
    fi


    local params=''
    if [ -n "${command}" ]; then
      params="${params} --command ${command}"
    fi


    if [ -n "${script_path}" ]; then
      # 如果提供了脚本路径

      if [ -n "${bin_path}" ]; then 
        params="${params} --bin-path ${bin_path}"
      fi
      if ${all}; then
        params="${params} --all"
      fi

      uninstall_by_script_path --path "${script_path}" ${params} --ignore ${ignore_reg_list[@]} ${additional}
    elif [ -n "${bin_path}" ]; then
      # 如果没提供脚本路径， 但bin_path不为空

      uninstall_by_bin_path --path "${bin_path}" ${params}
    elif [ -n "${command}" ]; then
      # 如果没提供脚本路径和bin_path, 但提供了command

      if ${all}; then
        params="${params} --all"
      fi

      remove_command ${params}
    else
      echo_fatal "Invalid parameters, use --help to show more information."
    fi
  fi



}


####################################################################################################
# Entry
####################################################################################################

# PATH=/sbin:/bin

# 尝试继承当前环境中YXLib的日志级别。
if [ -n "${YXLOGGER_DEFAULT_LEVEL}" ]; then
  set_info_level "${YXLOGGER_DEFAULT_LEVEL}"
fi

# 如果syslog的tag没被设置(没有上层脚本), 则将其设置为${CMD}
if [ -n "${YXLOGGER_SYSLOG_TAG}" ]; then
  YXLOGGER_SYSLOG_TAG="${CMD}"
fi

if [[ $(os_type) == 'osx' ]]; then
  # on osx, '/usr/local/sbin' is not a standard bin path
  BIN_PATH="${USR_LOCAL_BIN_PATH}"
  SBIN_PATH="${USR_LOCAL_BIN_PATH}"
  USR_BIN_PATH="${USR_LOCAL_BIN_PATH}"
  USR_SBIN_PATH="${USR_LOCAL_BIN_PATH}"
  USR_LOCAL_SBIN_PATH="${USR_LOCAL_BIN_PATH}"

  CP=/bin/cp
  RM=/bin/rm
  BASH=/bin/bash
  ENV=/usr/bin/env
else
  CP=/usr/bin/cp
  RM=/usr/bin/rm
  BASH=/bin/bash
  ENV=/usr/bin/env
fi



sub_cmd=$1
shift
if [[ -z ${sub_cmd} ]]; then
  echo_fatal "Param error. use '${CMD} --help' to show document"
fi


if [[ "${sub_cmd}" == 'install' ]]; then
  cmd_install $@
elif [[ "${sub_cmd}" == 'uninstall' ]]; then
  cmd_uninstall $@
elif [[ "${sub_cmd}" == '--help' ]] || [[ "${sub_cmd}" == '-h' ]]; then
  usage
  exit 0
else
  echo_fatal "Unknown sub command:'${sub_cmd}'. Use ${CMD} --help tho show help information."
fi